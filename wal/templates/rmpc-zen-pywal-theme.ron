/***
 *    ┳┓┳┳┓┏┓┏┓  ┏┓┓┏┓ ┏┏┓┓   ┏┳┓┓┏┏┓┳┳┓┏┓
 *    ┣┫┃┃┃┃┃┃ ━━┃┃┗┫┃┃┃┣┫┃ ━━ ┃ ┣┫┣ ┃┃┃┣ 
 *    ┛┗┛ ┗┣┛┗┛  ┣┛┗┛┗┻┛┛┗┗┛   ┻ ┛┗┗┛┛ ┗┗┛
 *                                        
 */


#![enable(implicit_some)]
#![enable(unwrap_newtypes)]
#![enable(unwrap_variant_newtypes)]
(
    default_album_art_path: None,
    draw_borders: false,
    show_song_table_header: false,
    symbols: (
        song: "󰌳 ",
        dir: " ",
        playlist: "󰲸 ",
        marker: "󰷞 ",
        song_style: (fg: "{color10}"),
        dir_style: (fg: "{color11}"),
        playlist_style: (fg: "{color12}"),
        marker_style: (fg: "{color13}"),
    ),
    layout: Split(
        direction: Vertical,
        panes: [
            (
                pane: Pane(Header),
                size: "2",
            ),
            (
                pane: Pane(TabContent),
                size: "100%",
            ),
            (
                pane: Pane(ProgressBar),
                size: "2",
            ),
        ],
    ),
    progress_bar: (
        symbols: ["━", "━", "󰝤", "", ""],
        track_style: (bg: "{background}"),
        elapsed_style: (fg: "{color12}", bg: "{background}"),
        thumb_style: (fg: "{color12}", bg: "{background}"),
    ),
    scrollbar: (
        symbols: ["│", "█", "▲", "▼"],
        track_style: (),
        ends_style: (),
        thumb_style: (fg: "{color13}"),
    ),
    browser_column_widths: [20, 38, 42],
    text_color: "{foreground}",
    background_color: "{background}",
    header_background_color: "{background}",
    modal_background_color: None,
    modal_backdrop: false,
    tab_bar: (active_style: (fg: "{background}", bg: "{color12}", modifiers: "Bold"), inactive_style: ()),
    borders_style: (fg: "{color15}"),
    highlighted_item_style: (fg: "{color13}", modifiers: "Bold"),
    current_item_style: (fg: "{foreground}", bg: "{background}", modifiers: "Bold"),
    highlight_border_style: (fg: "{color12}"),
    song_table_format: [
        (
            prop: (kind: Property(Artist), style: (fg: "{color13}"), default: (kind: Text("Unknown"))),
            width: "50%",
            alignment: Right,
        ),
        (
            prop: (kind: Text("-"), style: (fg: "{foreground}"), default: (kind: Text("Unknown"))),
            width: "1",
            alignment: Center,
        ),
        (
            prop: (kind: Property(Title), style: (fg: "{color12}"), default: (kind: Text("Unknown"))),
            width: "50%",
        ),
    ],
    header: (
        rows: [
            (
                left: [
                    (kind: Property(Status(StateV2(playing_label: " 󰐊 ", paused_label: " 󰏤 ", stopped_label: " 󰓛 "))), style: (fg: "{background}", bg: "{color13}", modifiers: "Bold")),
                ],
                center: [
                    (kind: Text(" 󰎇 "), style: (fg: "{background}", bg: "{color12}", modifiers: "Bold")),
                    (kind: Text(" "), style: (fg: "{background}", bg: "{color13}")),
                    (kind: Property(Song(Artist)), style: (fg: "{background}", bg: "{color13}", modifiers: "Bold"),
                        default: (kind: Text("Unknown"), style: (fg: "{background}", bg: "{color13}", modifiers: "Bold"))
                    ),
                    (kind: Text(" - "), style: (fg: "{background}", bg: "{color13}", modifiers: "Bold")),
                    (kind: Property(Song(Title)), style: (fg: "{background}", bg: "{color13}", modifiers: "Bold"),
                        default: (kind: Text("No Song"), style: (fg: "{background}", bg: "{color13}", modifiers: "Bold"))
                    ),
                    (kind: Text(" ["), style: (fg: "{background}", bg: "{color13}", modifiers: "Bold")),

                    (kind: Property(Status(Elapsed)), style: (fg: "{background}", bg: "{color13}")),

                    (kind: Text("/"), style: (fg: "{background}", bg: "{color13}", modifiers: "Bold")),

                    (kind: Property(Status(Duration)),style: (fg: "{background}", bg: "{color13}")),

                    (kind: Text(" 󱑽 "), style: (fg: "{background}", bg: "{color13}")),

                    (kind: Property(Status(Bitrate)), style: (fg: "{background}", bg: "{color13}")),

                    (kind: Text(" kbps"), style: (fg: "{background}", bg: "{color13}")),

                    (kind: Text("] "), style: (fg: "{background}", bg: "{color13}", modifiers: "Bold")),
                    (kind: Text(" 󰎇 "), style: (fg: "{background}", bg: "{color12}", modifiers: "Bold")),
                ],
                right: [
                    (kind: Text("   "), style: (fg: "{background}", bg: "{color9}", modifiers: "Bold")),
                    (kind: Property(Status(Volume)), style: (fg: "{background}", bg: "{color9}", modifiers: "Bold")),
                    (kind: Text("% "), style: (fg: "{background}", bg: "{color9}", modifiers: "Bold"))
                ]
            )
        ],
    ),
    cava: (
        bar_symbols: ['⠁', '⠂', '⠄', '⡀', '⡁', '⡃', '⡇', '⣇', '⣧', '⣷', '⣿'],
        inverted_bar_symbols: ['⠁', '⠂', '⠄', '⡀', '⡁', '⡃', '⡇', '⣇', '⣧', '⣷', '⣿'],
        bg_color: "{background}",
        bar_width: 1,
        bar_spacing: 0,
        orientation: Horizontal,
        bar_color: Gradient({{
            0: "{color15}",
            1: "{color14}",
            2: "{color13}",
            3: "{color12}",
            4: "{color11}",
            5: "{color10}",
            6: "{color15}",
            7: "{color14}",
            8: "{color13}",
            9: "{color12}",
            10: "{color11}",
            11: "{color10}",
            12: "{color15}",
            13: "{color14}",
            14: "{color13}",
            15: "{color12}",
            16: "{color11}",
            17: "{color10}",
            18: "{color15}",
            19: "{color14}",
            20: "{color13}",
            21: "{color12}",
            22: "{color11}",
            23: "{color10}",
            24: "{color15}",
            25: "{color14}",
            26: "{color13}",
            27: "{color12}",
            28: "{color11}",
            29: "{color10}",
            30: "{color15}",
            31: "{color14}",
            32: "{color13}",
            33: "{color12}",
            34: "{color11}",
            35: "{color10}",
            36: "{color15}",
            37: "{color14}",
            38: "{color13}",
            39: "{color12}",
            40: "{color11}",
            41: "{color10}",
            42: "{color15}",
            43: "{color14}",
            44: "{color13}",
            45: "{color12}",
            46: "{color11}",
            47: "{color10}",
            48: "{color15}",
            49: "{color14}",
            50: "{color13}",
            51: "{color12}",
            52: "{color11}",
            53: "{color10}",
            54: "{color15}",
            55: "{color14}",
            56: "{color13}",
            57: "{color12}",
            58: "{color11}",
            59: "{color10}",
            60: "{color15}",
            61: "{color14}",
            62: "{color13}",
            63: "{color12}",
            64: "{color11}",
            65: "{color10}",
            66: "{color15}",
            67: "{color14}",
            68: "{color13}",
            69: "{color12}",
            70: "{color11}",
            71: "{color10}",
            72: "{color15}",
            73: "{color14}",
            74: "{color13}",
            75: "{color12}",
            76: "{color11}",
            77: "{color10}",
            78: "{color15}",
            79: "{color14}",
            80: "{color13}",
            81: "{color12}",
            82: "{color11}",
            83: "{color10}",
            84: "{color15}",
            85: "{color14}",
            86: "{color13}",
            87: "{color12}",
            88: "{color11}",
            89: "{color10}",
            90: "{color15}",
            91: "{color14}",
            92: "{color13}",
            93: "{color12}",
            94: "{color11}",
            95: "{color10}",
            96: "{color15}",
            97: "{color14}",
            98: "{color13}",
            99: "{color12}",
            100: "{color11}",
        }})
    ),
)
